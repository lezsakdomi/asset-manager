rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        function authorized(uid) {
            let userRef = /databases/$(database)/documents/users/$(uid);
            let userData = get(userRef).data;
            let claims = userData['customClaims'];
            return 'activated' in claims && claims['activated']
//                && 'member' in claims && claims['member']
        }

        function isAdmin(uid) {
            let userRef = /databases/$(database)/documents/users/$(uid);
            let userData = get(userRef).data;
            let claims = userData['customClaims'];
            return 'admin' in claims && claims['admin']
        }

        function authenticated(request) {
            return debug(request.auth != null && authorized(request.auth.uid));
        }

        function currentUserSpecified(request, resource) {
            return authenticated(request)
                && request.auth.uid == resource.data.uid
        }

        function justRejects(request, resource) {
            return (request.resource.data.diff(resource.data).affectedKeys().size() == 1)
                && (request.resource.data['rejected'] == true)
        }

        match /users/{userId} {
            allow read: if authenticated(request) || request.auth.uid == userId;
            allow update: if request.auth.uid == userId
                && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['customClaims'])
                && ('customClaims' in resource.data
                    ? request.resource.data['customClaims'].diff(resource.data['customClaims']).affectedKeys().hasOnly(['activated'])
                    : request.resource.data['customClaims'].keys().hasOnly(['activated'])
                );
        }

        match /assets/{assetId} {
            function checkAssetOwnerChange(request, resource) {
                let newOwnerId = request.resource.data['latestOwnerId'];
                let newOwnerRef = /databases/$(database)/documents/assets/$(assetId)/owners/$(newOwnerId);
                let newOwner = getAfter(newOwnerRef);
                return authenticated(request)
                    && (isAdmin(request.auth.uid) || !('latestOwnerUid' in resource.data) || resource.data['latestOwnerUid'] == request.auth.uid)
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['latestOwnerId', 'latestOwnerUid'])
                    && request.resource.data['latestOwnerUid'] == newOwner.data.uid
                    && newOwner.data['since'] == request.time;
            }

            function checkAssetBaseChange(request, resource) {
                return authenticated(request)
                    && isAdmin(request.auth.uid)
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['baseUid']);
            }

            allow read: if authenticated(request);
            allow update: if checkAssetOwnerChange(request, resource) || checkAssetBaseChange(request, resource);

            function assetRef() {
                return /databases/$(database)/documents/assets/$(assetId)
            }

            match /owners/{ownerId} {
                function checkOwnerChain(request, resource, asset) {
                    let previousOwnerId = asset.data['latestOwnerId'];
                    let previousOwnerRef = /databases/$(database)/documents/assets/$(assetId)/owners/$(previousOwnerId);
                    let baseOtrId = resource.data['otrId'];
                    let baseOtrRef = /databases/$(database)/documents/assets/$(assetId)/owners/$(previousOwnerId)/ownership-transfer-requests/$(baseOtrId);
                    return get(previousOwnerRef).data['uid'] == request.auth.uid
                        && resource.data['previousOwnerId'] == previousOwnerId
                        && get(baseOtrRef).data['uid'] == resource.data['uid'];
                }
                function checkOwnerCreate(request, resource) {
                    let asset = get(assetRef());
                    return authenticated(request)
                        && (isAdmin(request.auth.uid) || !('latestOwnerId' in asset.data) || checkOwnerChain(request, resource, asset))
                        && resource.data['since'] == request.time
                        && getAfter(assetRef()).data['latestOwnerId'] == ownerId;
                }

                allow read: if authenticated(request);
                allow create: if checkOwnerCreate(request, request.resource);
                allow update, delete: if false;

                function ownerRef() {
                    return /databases/$(database)/documents/assets/$(assetId)/owners/$(ownerId)
                }

                match /ownership-transfer-requests/{otrId} {
                    allow read: if authenticated(request);
                    allow create: if currentUserSpecified(request, request.resource)
                        && request.resource.data['at'] == request.time;
                    allow update: if (currentUserSpecified(request, resource)
                        || currentUserSpecified(request, get(ownerRef())))
                        && justRejects(request, resource);
                    allow delete: if false;
                }
            }
        }
    }
}